import axios from "axios";
import { printError, printWeather } from "./log.service.js";
import { getCities, getToken } from "./storage.service.js";
const getIcon = (icon) => {
  const iconMap = {
    "01": "‚òÄÔ∏è",
    "02": "‚õÖ",
    "03": "‚òÅÔ∏è",
    "04": "‚òÅÔ∏è",
    "09": "üåßÔ∏è",
    10: "‚õÖ",
    11: "‚òÅÔ∏è",
    13: "üå®Ô∏è",
    50: "ü•µ",
  };
  return iconMap[icon.slice(0, -1)];
};
const getWeather = async (city) => {
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${OPEN_WEATHER_MAP_API_KEY}&units=metric`;
  const OPEN_WEATHER_MAP_API_KEY = await getToken();
  if (!OPEN_WEATHER_MAP_API_KEY) {
    throw new Error("Token not available. Set it with command : -t [API_KEY]");
  }
  const { data } = await axios.get(
    `https://api.openweathermap.org/data/2.5/weather`,
    {
      params: {
        q: city,
        appid: OPEN_WEATHER_MAP_API_KEY,
        lang: "ru",
        units: "metric",
      },
    }
  );

  return data;
};

const getForecast = async () => {
  try {
    const cities = await getCities();
    if (!cities) {
      throw new Error("City not available. Set it with command : -s [city]");
    }
    for (const city of cities) {
      const weather = await getWeather(city);
      printWeather(weather, getIcon(weather.weather[0].icon));
    }
  } catch (err) {
    if (err?.response?.status == 404) {
      printError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    } else if (err?.response?.status == 401) {
      printError("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é -t [API_KEY]");
    } else {
      printError(err.message);
    }
  }
};

export { getForecast, getIcon, getWeather };
